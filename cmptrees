#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;
use Digest::MD5;
use Digest::SHA;
use Getopt::Long;
use Path::Iterator::Rule;

my %options;
GetOptions(\%options,
    'exclude|x=s@',
    'include|i=s@',
    'md5|m!',
    'sha|s!',
    'help|h|?!',
);


my ($source_dir,$target_dir) = @ARGV;

# default instructions/help
if ($options{'help'} || !$source_dir || !$target_dir) {
    print "Usage: $0 SOURCE_DIR TARGET_DIR
\t--include STRING_OR_REGEX # only show matching filenames
\t--exclude STRING_OR_REGEX # exclude matching filenames
\t--md5                     # compare md5 digests
\t--sha                     # compare sha digests
\t--help                    # display this message\n";
    exit;
}


my $rule = Path::Iterator::Rule->new;

my $next = $rule->iter( $source_dir, { relative => 1 } );
FILE: while ( defined( my $file = $next->() ) ) {
    for my $exclude (@{$options{'exclude'}}) {
        next FILE if $file =~ m/$exclude/;
    }
    for my $include (@{$options{'include'}}) {
        next FILE if $file !~ m/$include/;
    }
    my $target = "$target_dir/$file";
    $target =~ s{//}{/}g;
    if (!-e $target) {
        print "$file is missing from $target_dir\n";
        next FILE;
    }
    my ($file_sha,$file_md5);
    if ($options{'sha'} && !-d $file) {
        if (sha_file($file) ne sha_file($target)) {
            print "$file is not the same (SHA) as the file in $target_dir\n";
        }
    }
    if ($options{'md5'} && !-d $file) {
        if (md5_file($file) ne md5_file($target)) {
            print "$file is not the same (MD5) as the file in $target_dir\n";
        }
    }
}

sub sha_file {
    my $filename = shift || die "missing file for md5 sum";
    return Digest::SHA->new->addfile($filename)->hexdigest;
}

sub md5_file {
    my $filename = shift || die "missing file for md5 sum";
    open (my $fh, '<', $filename) or die "Can't open '$filename': $!";
    binmode($fh);
    return Digest::MD5->new->addfile($fh)->hexdigest;
}
